@page
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using System.Security.Claims;
@using DemystifyTutorialSrp.Services.Account;
@using srp4net.Helpers;
@*
    This is a login page implementing the SRP protocol.
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@functions
{
    // TODO — get rid of these
    [BindProperty]
    public string UserName { get; set; }

    [BindProperty]
    public string Password { get; set; }

    public IActionResult OnPostAuthStep1([FromBody] AuthStep1 step1)
    {
        // check if the user exists
        var error = UserInfoRepository.AuthStep1(step1.User, out var sHex, out var vHex, out var userName);
        if (error != 0)
        {
            return new JsonResult(new AuthStep1Result { Error = error });
        }

        // perform step1
        Crypto.SRP.AuthStep1(vHex, step1.AHex, out var bHex, out var BHex, out var uHex);

        var uniq1 = DateTime.Now.Ticks.ToString();

        // save step1 results
        AuthData.Add(new AuthData
        {
            UserName = userName,
            User = step1.User,
            Uniq = uniq1,
            sHex = sHex,
            vHex = vHex,
            AHex = step1.AHex,
            bHex = bHex,
            BHex = BHex,
            uHex = uHex
        });

        // return JSON result so that the callback can decide what to do next
        return new JsonResult(new AuthStep1Result
        {
            Error = 0,
            Uniq1 = uniq1,
            sHex = sHex,
            BHex = BHex,
            uHex = uHex
        });
    }

    public async Task<IActionResult> OnPostAuthStep2([FromBody] AuthStep2 step2)
    {
        var authData = AuthData.Find(step2.User, step2.Uniq1);
        if (authData == null)
        {
            return new JsonResult(new AuthStep2Result { Error = 1 });
        }

        // perform step2 and compute server-side m1
        Crypto.SRP.AuthStep2(
            authData.vHex,
            authData.uHex,
            authData.AHex,
            authData.bHex,
            authData.BHex,
            out var m1serverHex,
            out var m2Hex);

        if (m1serverHex == step2.m1Hex)
        {
            // from the server's point of view, everything is Ok — the client is authenticated
            var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme);
            identity.AddClaim(new Claim(ClaimTypes.Name, authData.UserName)); // lookupUser.UserName

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(identity));
        }
        else
        {
            // authentication failed
            return new JsonResult(new AuthStep2Result { Error = 2 });
        }

        // cleanup the authentication queue
        AuthData.Remove(authData);

        // authentication succeeded
        var uniq2 = DateTime.Now.Ticks.ToString();
        return new JsonResult(new AuthStep2Result
        {
            Error = 0,
            Uniq2 = uniq2,
            m2Hex = m2Hex,
            Redirect = "/Index",
        });
    }

    public async Task<IActionResult> OnGetLogout()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        return RedirectToPage("/Index");
    }
}

<h1>Login</h1>

@using (Html.BeginForm("Login", "Login", FormMethod.Post)) // action name, controller name
{
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="UserName" class="col-md-2 control-label">User name</label>
        <div class="col-md-10">
            <input asp-for="UserName" class="form-control" />
            <span asp-validation-for="UserName" class="text-danger"></span>
        </div>

        <label asp-for="Password" class="col-md-2 control-label">Password</label>
        <div class="col-md-10">
            <input asp-for="Password" type="password" class="form-control" />
            <span asp-validation-for="Password" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="button" class="btn btn-primary"
                    onclick="$u.crypto.srp.Authenticate(
                                $.find('input#UserName')[0].value,
                                $.find('input#Password')[0].value,
                                $.find('input[name=\'__RequestVerificationToken\']')[0].value,
                                function (data) {
                                    //alert('Authenticate returns: ' + $.toJSON(data));
                                    if (data.redirect) {
                                        window.location.href = data.redirect;
                                    }
                                }); return true;">
                Register
            </button>
        </div>
    </div>
}
